#!/usr/bin/env python3

# Default learning schedule, stochastic gradient descent with warm restarts 
# (recommend previewing every 10th):
# 8.33e-05:1, 2.43e-04:2, 3.78e-04:3, 4.68e-04:4, 5.00e-04:5, 4.68e-04:6, 3.78e-04:7, 2.43e-04:8, 8.33e-05:9, 5.00e-04:10, 4.94e-04:11, 4.75e-04:12, 4.44e-04:13, 4.03e-04:14, 3.51e-04:15, 2.92e-04:16, 2.26e-04:17, 1.56e-04:18, 8.33e-05:19, 5.00e-04:20, 4.94e-04:21, 4.75e-04:22, 4.44e-04:23, 4.03e-04:24, 3.51e-04:25, 2.92e-04:26, 2.26e-04:27, 1.56e-04:28, 8.33e-05:29, 5.00e-04:30, 4.94e-04:31, 4.75e-04:32, 4.44e-04:33, 4.03e-04:34, 3.51e-04:35, 2.92e-04:36, 2.26e-04:37, 1.56e-04:38, 8.33e-05:39, 5.00e-04:40, 4.94e-04:41, 4.75e-04:42, 4.44e-04:43, 4.03e-04:44, 3.51e-04:45, 2.92e-04:46, 2.26e-04:47, 1.56e-04:48, 8.33e-05:49, 5.00e-04:50, 4.94e-04:51, 4.75e-04:52, 4.44e-04:53, 4.03e-04:54, 3.51e-04:55, 2.92e-04:56, 2.26e-04:57, 1.56e-04:58, 8.33e-05:59, 5.00e-04:60, 4.94e-04:61, 4.75e-04:62, 4.44e-04:63, 4.03e-04:64, 3.51e-04:65, 2.92e-04:66, 2.26e-04:67, 1.56e-04:68, 8.33e-05:69, 5.00e-04:70, 4.94e-04:71, 4.75e-04:72, 4.44e-04:73, 4.03e-04:74, 3.51e-04:75, 2.92e-04:76, 2.26e-04:77, 1.56e-04:78, 8.33e-05:79, 5.00e-04:80, 4.94e-04:81, 4.75e-04:82, 4.44e-04:83, 4.03e-04:84, 3.51e-04:85, 2.92e-04:86, 2.26e-04:87, 1.56e-04:88, 8.33e-05:89, 5.00e-04:90, 4.94e-04:91, 4.75e-04:92, 4.44e-04:93, 4.03e-04:94, 3.51e-04:95, 2.92e-04:96, 2.26e-04:97, 1.56e-04:98, 8.33e-05:99, 5.00e-04:100, 4.94e-04:101, 4.75e-04:102, 4.44e-04:103, 4.03e-04:104, 3.51e-04:105, 2.92e-04:106, 2.26e-04:107, 1.56e-04:108, 8.33e-05:109, 5.00e-04:110, 4.94e-04:111, 4.75e-04:112, 4.44e-04:113, 4.03e-04:114, 3.51e-04:115, 2.92e-04:116, 2.26e-04:117, 1.56e-04:118, 8.33e-05:119, 5.00e-04:120, 4.94e-04:121, 4.75e-04:122, 4.44e-04:123, 4.03e-04:124, 3.51e-04:125, 2.92e-04:126, 2.26e-04:127, 1.56e-04:128, 8.33e-05:129, 5.00e-04:130, 4.94e-04:131, 4.75e-04:132, 4.44e-04:133, 4.03e-04:134, 3.51e-04:135, 2.92e-04:136, 2.26e-04:137, 1.56e-04:138, 8.33e-05:139, 5.00e-04:140, 4.94e-04:141, 4.75e-04:142, 4.44e-04:143, 4.03e-04:144, 3.51e-04:145, 2.92e-04:146, 2.26e-04:147, 1.56e-04:148, 8.33e-05:149, 5.00e-04:150, 4.94e-04:151, 4.75e-04:152, 4.44e-04:153, 4.03e-04:154, 3.51e-04:155, 2.92e-04:156, 2.26e-04:157, 1.56e-04:158, 8.33e-05:159, 5.00e-04:160, 4.94e-04:161, 4.75e-04:162, 4.44e-04:163, 4.03e-04:164, 3.51e-04:165, 2.92e-04:166, 2.26e-04:167, 1.56e-04:168, 8.33e-05:169, 5.00e-04:170, 4.94e-04:171, 4.75e-04:172, 4.44e-04:173, 4.03e-04:174, 3.51e-04:175, 2.92e-04:176, 2.26e-04:177, 1.56e-04:178, 8.33e-05:179, 5.00e-04:180, 4.94e-04:181, 4.75e-04:182, 4.44e-04:183, 4.03e-04:184, 3.51e-04:185, 2.92e-04:186, 2.26e-04:187, 1.56e-04:188, 8.33e-05:189, 5.00e-04:190, 4.94e-04:191, 4.75e-04:192, 4.44e-04:193, 4.03e-04:194, 3.51e-04:195, 2.92e-04:196, 2.26e-04:197, 1.56e-04:198, 8.33e-05:199, 5.00e-04:200, 4.94e-04:201, 4.75e-04:202, 4.44e-04:203, 4.03e-04:204, 3.51e-04:205, 2.92e-04:206, 2.26e-04:207, 1.56e-04:208, 8.33e-05:209, 5.00e-04:210, 4.94e-04:211, 4.75e-04:212, 4.44e-04:213, 4.03e-04:214, 3.51e-04:215, 2.92e-04:216, 2.26e-04:217, 1.56e-04:218, 8.33e-05:219, 5.00e-04:220, 4.94e-04:221, 4.75e-04:222, 4.44e-04:223, 4.03e-04:224, 3.51e-04:225, 2.92e-04:226, 2.26e-04:227, 1.56e-04:228, 8.33e-05:229, 5.00e-04:230, 4.94e-04:231, 4.75e-04:232, 4.44e-04:233, 4.03e-04:234, 3.51e-04:235, 2.92e-04:236, 2.26e-04:237, 1.56e-04:238, 8.33e-05:239, 5.00e-04:240, 4.94e-04:241, 4.75e-04:242, 4.44e-04:243, 4.03e-04:244, 3.51e-04:245, 2.92e-04:246, 2.26e-04:247, 1.56e-04:248, 8.33e-05:249, 5.00e-04:250, 4.94e-04:251, 4.75e-04:252, 4.44e-04:253, 4.03e-04:254, 3.51e-04:255, 2.92e-04:256, 2.26e-04:257, 1.56e-04:258, 8.33e-05:259, 5.00e-04:260, 4.94e-04:261, 4.75e-04:262, 4.44e-04:263, 4.03e-04:264, 3.51e-04:265, 2.92e-04:266, 2.26e-04:267, 1.56e-04:268, 8.33e-05:269, 5.00e-04:270, 4.94e-04:271, 4.75e-04:272, 4.44e-04:273, 4.03e-04:274, 3.51e-04:275, 2.92e-04:276, 2.26e-04:277, 1.56e-04:278, 8.33e-05:279, 5.00e-04:280, 4.94e-04:281, 4.75e-04:282, 4.44e-04:283, 4.03e-04:284, 3.51e-04:285, 2.92e-04:286, 2.26e-04:287, 1.56e-04:288, 8.33e-05:289, 5.00e-04:290, 4.94e-04:291, 4.75e-04:292, 4.44e-04:293, 4.03e-04:294, 3.51e-04:295, 2.92e-04:296, 2.26e-04:297, 1.56e-04:298, 8.33e-05:299, 5.00e-04:300, 4.94e-04:301, 4.75e-04:302, 4.44e-04:303, 4.03e-04:304, 3.51e-04:305, 2.92e-04:306, 2.26e-04:307, 1.56e-04:308, 8.33e-05:309, 5.00e-04:310, 4.94e-04:311, 4.75e-04:312, 4.44e-04:313, 4.03e-04:314, 3.51e-04:315, 2.92e-04:316, 2.26e-04:317, 1.56e-04:318, 8.33e-05:319, 5.00e-04:320, 4.94e-04:321, 4.75e-04:322, 4.44e-04:323, 4.03e-04:324, 3.51e-04:325, 2.92e-04:326, 2.26e-04:327, 1.56e-04:328, 8.33e-05:329, 5.00e-04:330, 4.94e-04:331, 4.75e-04:332, 4.44e-04:333, 4.03e-04:334, 3.51e-04:335, 2.92e-04:336, 2.26e-04:337, 1.56e-04:338, 8.33e-05:339, 5.00e-04:340, 4.94e-04:341, 4.75e-04:342, 4.44e-04:343, 4.03e-04:344, 3.51e-04:345, 2.92e-04:346, 2.26e-04:347, 1.56e-04:348, 8.33e-05:349, 5.00e-04:350, 4.94e-04:351, 4.75e-04:352, 4.44e-04:353, 4.03e-04:354, 3.51e-04:355, 2.92e-04:356, 2.26e-04:357, 1.56e-04:358, 8.33e-05:359, 5.00e-04:360, 4.94e-04:361, 4.75e-04:362, 4.44e-04:363, 4.03e-04:364, 3.51e-04:365, 2.92e-04:366, 2.26e-04:367, 1.56e-04:368, 8.33e-05:369, 5.00e-04:370, 4.94e-04:371, 4.75e-04:372, 4.44e-04:373, 4.03e-04:374, 3.51e-04:375, 2.92e-04:376, 2.26e-04:377, 1.56e-04:378, 8.33e-05:379, 5.00e-04:380, 4.94e-04:381, 4.75e-04:382, 4.44e-04:383, 4.03e-04:384, 3.51e-04:385, 2.92e-04:386, 2.26e-04:387, 1.56e-04:388, 8.33e-05:389, 5.00e-04:390, 4.94e-04:391, 4.75e-04:392, 4.44e-04:393, 4.03e-04:394, 3.51e-04:395, 2.92e-04:396, 2.26e-04:397, 1.56e-04:398, 8.33e-05:399, 5.00e-04:400, 4.94e-04:401, 4.75e-04:402, 4.44e-04:403, 4.03e-04:404, 3.51e-04:405, 2.92e-04:406, 2.26e-04:407, 1.56e-04:408, 8.33e-05:409, 5.00e-04:410, 4.94e-04:411, 4.75e-04:412, 4.44e-04:413, 4.03e-04:414, 3.51e-04:415, 2.92e-04:416, 2.26e-04:417, 1.56e-04:418, 8.33e-05:419, 5.00e-04:420, 4.94e-04:421, 4.75e-04:422, 4.44e-04:423, 4.03e-04:424, 3.51e-04:425, 2.92e-04:426, 2.26e-04:427, 1.56e-04:428, 8.33e-05:429, 5.00e-04:430, 4.94e-04:431, 4.75e-04:432, 4.44e-04:433, 4.03e-04:434, 3.51e-04:435, 2.92e-04:436, 2.26e-04:437, 1.56e-04:438, 8.33e-05:439, 5.00e-04:440, 4.94e-04:441, 4.75e-04:442, 4.44e-04:443, 4.03e-04:444, 3.51e-04:445, 2.92e-04:446, 2.26e-04:447, 1.56e-04:448, 8.33e-05:449, 5.00e-04:450, 4.94e-04:451, 4.75e-04:452, 4.44e-04:453, 4.03e-04:454, 3.51e-04:455, 2.92e-04:456, 2.26e-04:457, 1.56e-04:458, 8.33e-05:459, 5.00e-04:460, 4.94e-04:461, 4.75e-04:462, 4.44e-04:463, 4.03e-04:464, 3.51e-04:465, 2.92e-04:466, 2.26e-04:467, 1.56e-04:468, 8.33e-05:469, 5.00e-04:470, 4.94e-04:471, 4.75e-04:472, 4.44e-04:473, 4.03e-04:474, 3.51e-04:475, 2.92e-04:476, 2.26e-04:477, 1.56e-04:478, 8.33e-05:479, 5.00e-04:480, 4.94e-04:481, 4.75e-04:482, 4.44e-04:483, 4.03e-04:484, 3.51e-04:485, 2.92e-04:486, 2.26e-04:487, 1.56e-04:488, 8.33e-05:489, 5.00e-04:490, 4.94e-04:491, 4.75e-04:492, 4.44e-04:493, 4.03e-04:494, 3.51e-04:495, 2.92e-04:496, 2.26e-04:497, 1.56e-04:498, 8.33e-05:499, 5.00e-04:500, 4.94e-04:501, 4.75e-04:502, 4.44e-04:503, 4.03e-04:504, 3.51e-04:505, 2.92e-04:506, 2.26e-04:507, 1.56e-04:508, 8.33e-05

# The recommended values are just based on things I read online. Please feel 
# free to experiment, let me know if you find anything interesting!

from math import *

MAX=5e-4 # recommended value is the LR that minimizes loss, divided by 10
MIN=MAX/6 # recommended value is MAX/6
CYCLE_LEN=10 # cycle length, recommended (2-10) * steps_per_epoch
CYCLES=50 # number of cycles to generate
DECAY=0.0 # lower numbers decay slower, higher numbers decay faster, 0 disables decay
RESTARTS=1 # 1 for half wave, 0 for full wave (CYCLE_LEN is doubled)
START=2 # 2 for single full wave prior to half waves, 1 to start at MAX, 0 to start at MIN
ONECYCLE=0 # 1cycle phase length, 0 to disable
ONECYCLE_MIN=MIN/100
STEP_OFF=0 # step offset, for resuming training with a different schedule
WAVE=1 # 1 for sine, 0 for triangle/sawtooth
PLOT=0 # plot out the learning rate schedule w/ matplotlib

# TODO add variable length cycles

if ONECYCLE > 0:
    CYCLES=1
    START=0
    RESTARTS=0

def transform_wave(func):
    def wrap(*args, **kwargs):
        val = func(*args, **kwargs)
        if WAVE == 1:
            return sin(val * pi/2)
        else:
            return val
    return wrap

@transform_wave
def saw(start, i, c_len):
    return abs(start - (i%c_len) / (c_len-1))

@transform_wave
def tri(start, i, c_len):
    return abs(1-start - abs(i%(2*c_len-1) - (c_len-1)) / (c_len-1))

rates = []

if START == 2:
    firstwave = lambda i: tri(0, i, ceil(CYCLE_LEN/2))
    rates = [MIN * (1 - firstwave(i)) + MAX * firstwave(i) for i in range(CYCLE_LEN-1)] + rates;
    START=1

if RESTARTS == 1:
    FULL_CYCLE_LEN=CYCLE_LEN
    STEPS=CYCLE_LEN*CYCLES
    wave = lambda i: saw(START, i, CYCLE_LEN)
else:
    FULL_CYCLE_LEN=2*(CYCLE_LEN-1)
    STEPS=FULL_CYCLE_LEN*CYCLES+1
    wave = lambda i: tri(START, i, CYCLE_LEN)

decay = lambda v,i: v / (1 + i//FULL_CYCLE_LEN * DECAY)

rates += [decay(MIN,i) * (1 - wave(i)) + decay(MAX,i) * wave(i) for i in range(STEPS)]

if ONECYCLE > 0:
    wave_1cyc = lambda i: tri(0, i, ONECYCLE+1)
    rates += [MIN * (1 - wave_1cyc(i)) + ONECYCLE_MIN * wave_1cyc(i) for i in range(1, ONECYCLE+1)]

rates_str = [f"{x:.2e}:{i+1+STEP_OFF}" for (i,x) in enumerate(rates)]
rates_str[-1] = rates_str[-1].split(":")[0] # coast on final LR
print(", ".join(rates_str))

if PLOT == 1:
    import matplotlib.pyplot as plt
    plt.plot(range(1, len(rates)+1), rates)
    plt.grid()
    plt.title(f"Avg: {sum(rates)/len(rates)}")
    plt.show()
